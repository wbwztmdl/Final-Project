"""a pokemon game.the player needs to catch, train pokemons in order to defeat Boss in 5 daysthere are several commands:1. exit game: exit game2. check player: check information of player3. check pokemons: check information of player's pokemons4. hang out: hang out and encounter pokemons(reduce one energy)5. work: go working to get money(reduce one energy)6. treat pokemons: recover pokemons hp and mp(reduce one energy)(reduce money)7. sleep: sleep to the next day and restore energy8. check boss: check information of Boss9. challenge boss: to fight against Boss(reduce two energy)10. command list: to show the commands"""import timeimport copyimport game_classimport constant_dataimport randomcurrent_pokemon = game_class.Pokemon('pikachu', 'pikachu', 1, 90, 5, 120, 40, 0.4)# begin game or exit gamedef menu_command():    while True:        command = input("Please type in a command <begin game|exit game>: ").lower()        if command == 'exit game':            print(">>> GAME IS END!")            return False        elif command == 'begin game':            print(">>> GAME BEGINS!\n")            return True        else:            print("Input Error!")# pokemon learn a skill from it‘s skill bank according to it's type and leveldef learn_skill(pokemon, pokemon_skills):    """    :param pokemon:    :param pokemon_skills: the skill bank    """    for i in range(len(pokemon_skills)):        print(f"{i + 1}: " + pokemon_skills[i].__str__() + "\n")    while True:        index = input("please choose one skill to learn or cancel <index|cancel>: ").lower()        if index.isdecimal() and 0 < int(index) < len(pokemon_skills) + 1:            index = int(index)            break        elif index == 'cancel':            print("You choose to cancel leaning")            return        else:            print("Input Error!")    print(f"You choose to learn {pokemon_skills[index - 1].name}")    # if it already has 4 skills,it has to forget one old skill or cancel learning new skill    if len(pokemon.skills) == 4:        print(f"{pokemon.name} already has 4 skills!")        for i in range(len(pokemon.skills)):            print(f"{i + 1}: " + pokemon.skills[i].__str__() + "\n")        while True:            command = input("You need to choose one skill to forget or cancel leaning new skills<{index}|cancel>: ")            if command.isdecimal() and 0 < int(command) < 5:                print(f'{pokemon.name} forget {pokemon.skills[int(command) - 1].name}')                pokemon.skills.pop(int(command) - 1)                print(f'{pokemon.name} learnt {pokemon_skills[index - 1].name}')                pokemon.skills.append(pokemon_skills[index - 1])                break            elif command == 'cancel':                print("You choose to cancel leaning")                break            else:                print("Input Error!")    else:  # if it's skills less than 4        print(f'{pokemon.name} learnt {pokemon_skills[index - 1].name}')        pokemon.skills.append(pokemon_skills[index - 1])# player choose an initial pokemon with level 2def choose_initial_pokemon(player):    for i in range(len(constant_data.initial_pokemons)):        print(f"{i + 1}: {constant_data.initial_pokemons[i].name}")    continuing = True    while continuing:        index = input('Please choose one pokemon <{index}>: ')        if not index.isdecimal():            print("Input Error!")        elif int(index) not in range(1, 5):            print("Out of range!")        else:            print(f"You have chosen {index}: {constant_data.initial_pokemons[int(index) - 1].name}")            print(constant_data.initial_pokemons[int(index) - 1])            while True:                command = input("Are you sure <yes|no>: ").lower()                if command == 'yes':                    player.add_pokemon(copy.deepcopy(constant_data.initial_pokemons[int(index) - 1]))                    print(f"You have successfully chosen {player.pokemons[0].name}!")                    name = input("You can rename your pokemon now: ")                    player.pokemons[0].name = name                    print("Rename successfully.")                    print(f"{player.pokemons[0].name}'s level has been raised!")                    player.pokemons[0].level_up('hp')                    # learn a basic skill                    learn_skill(player.pokemons[0], constant_data.skill_dict[player.pokemons[0].pokemon_type][0])                    continuing = False                    break                elif command == 'no':                    break                else:                    print("Input Error!")# randomly spawn a wide pokemon as an encountered enemydef spawn_pokemon(day_num):    # randomly spawn an initial pokemon    index = random.randint(0, 3)    spawn_pokemon = copy.deepcopy(constant_data.initial_pokemons[index])    spawn_pokemon.max_mp = '∞'    spawn_pokemon.current_mp = '∞'    # it's level based on the day_num, for each level, randomly level-up attribute    i = 0    while i < day_num:        i += 1        index_attribute = random.randint(0, 3)        attribute = constant_data.attributes[index_attribute]  # randomly choose an attribute        spawn_pokemon.level_up(attribute)  # level_up that attribute    # randomly add skills to spawn_pokemon according to day_num    pokemon_skills_low = constant_data.skill_dict[spawn_pokemon.pokemon_type][0]    pokemon_skills_medium = constant_data.skill_dict[spawn_pokemon.pokemon_type][1]    pokemon_skills_high = constant_data.skill_dict[spawn_pokemon.pokemon_type][2]    if day_num < 2:        index = random.randint(0, 1)        spawn_pokemon.skills.append(pokemon_skills_low[index])    elif day_num < 4:        index = random.sample(range(0, 3), day_num)        for j in index:            spawn_pokemon.skills.append(pokemon_skills_medium[j])    else:        index = random.sample(range(0, 5), 3)        for j in index:            spawn_pokemon.skills.append(pokemon_skills_high[j])    return spawn_pokemon# choose one owned pokemon to fightdef choose_pokemon(player):    for i in range(len(player.pokemons)):        print(            f'{i + 1}: {player.pokemons[i].name}  level: {player.pokemons[i].level}  HP: {player.pokemons[i].current_hp}  MP: {player.pokemons[i].current_mp}')    while True:        index = input("Choose one pokemon to fight against enemy <{index}>: ")        if index.isdecimal() and 0 < int(index) <= len(player.pokemons):            pokemon = player.pokemons[int(index) - 1]            if pokemon.current_hp != 0:                print(f"I choose you, {pokemon.name}!")                return pokemon            else:                print(f"{pokemon.name} can't fight, please choose another one!")        else:            print("Input Error!")def level_up(pokemon):    print(f"{pokemon.name}'s level has been raised!")    # upgrade a attribute    while True:        attribute = input(f"please choose one attribute to add{constant_data.attributes}: ")        if attribute in constant_data.attributes:            break        else:            print("Input Error!")    pokemon.level_up(attribute)    print(f"Successfully add {attribute}")    # define the skills bank it can learn according to its level    if pokemon.level <= 2:        pokemon_skills = constant_data.skill_dict[pokemon.pokemon_type][0]    elif pokemon.level <= 4:        pokemon_skills = constant_data.skill_dict[pokemon.pokemon_type][1]    else:        pokemon_skills = constant_data.skill_dict[pokemon.pokemon_type][2]    # remove what has been already learnt from the skill bank    pokemon_skills = pokemon_skills.copy()    for i in pokemon.skills:        if i.name != 'crash':            pokemon_skills.remove(i)    # learn new skill    learn_skill(pokemon, pokemon_skills)def catch(player, enemy):    """catch a pokemon       return a boolean showing whether the interaction can continue       if the catch is successful, then the interaction should end, return False"""    # if enemy is a boss, you can't catch it    if enemy.name == 'mewtwo' or enemy.name == 'onix':        print("You can't catch a BOSS!")        return True        # if the enemy's current HP <= 0.25 * max_hp,you can successfully catch it    if enemy.current_hp / enemy.max_hp <= 0.25:        print(f"You successfully catch {enemy.name}!")        # if player already have 4 pokemons, then have to release one owned pokemon or cancel catch        if len(player.pokemons) >= 4:            print("You already have 4 pokemons!")            for index in range(1, 5):                print(f"{index}: {player.pokemons[index - 1].name}  level: {player.pokemons[index - 1].level}")            while True:                command = input("please choose one to Release or cancel catching <{index}|cancel>: ").lower()                if command == 'cancel':                    print(f"You choose not to catch {enemy.name}")                    return False                elif command.isdecimal() and int(command) in range(1, 5):                    print(f"You choose to release {player.pokemons[int(command) - 1].name}")                    player.pokemons.pop(int(command) - 1)                    name = input("Now you can rename the new pokemon: ")                    enemy.name = name                    # change mp from '∞' to integer                    enemy.max_mp = 4 + enemy.level                    enemy.current_mp = 4 + enemy.level                    print(f"{enemy.name} is your pokemon now!")                    player.pokemons.append(enemy)                    return False                else:                    print("Input Error!")        else:  # if the player's pokemons are less than 4            name = input("Now you can rename the new pokemon: ")            enemy.name = name            enemy.max_mp = 4 + enemy.level            enemy.current_mp = 4 + enemy.level            print(f"{enemy.name} is your pokemon now!")            player.pokemons.append(enemy)            return False    else:  # if not less than 0.25 * max_hp, you fail to catch it        print(f"You fail to catch {enemy.name}!")        return True# player's pokemon attacks an enemydef attack(player, enemy):    global current_pokemon    # choose a skill of the pokemon to implement    for index in range(len(current_pokemon.skills)):        print(f"{index + 1}: {current_pokemon.skills[index].__str__()}\n")    continuing = True    while continuing:        command = input("choose one skill to implement <{index}>: ")        if command.isdecimal() and int(command) - 1 in range(len(current_pokemon.skills)):            # if successfully implement a skill, stop continuing, else keep choosing a skill            continuing = not current_pokemon.skills[int(command) - 1].activate(current_pokemon, enemy)        else:            print("Input Error!")    # IF the enemy is defeated and not a boss    if enemy.current_hp == 0 and enemy.name != 'mewtwo' and enemy.name != 'onix':        # catch the enemy        while True:            command = input("Do you want to catch it? <yes|no>").lower()            if command == 'yes':                catch(player, enemy)                break            elif command == 'no':                break            else:                print("Input Error")        # pokemon level up        level_up(current_pokemon)        return False    # if the enemy is defeated, and it is a boss, the game is over(no need to level up)    elif enemy.current_hp == 0 and (enemy.name == 'mewtwo' or enemy.name == 'onix'):        return False    else:        return Truedef player_turn(player, enemy):    """    the player turn in the interaction    :param player:    :param enemy:    :return: Boolean   showing whether the interaction should continue    if return False, means the interaction should be ended    """    global current_pokemon    while True:        command = input("What you want to do <attack|catch|change pokemon|run>: ")        if command == 'run':            print("You ran away!")            return False        elif command == 'change pokemon':            current_pokemon = choose_pokemon(player)            return True        elif command == 'catch':            flag = catch(player, enemy)            if not flag:   # if successfully catch the enemy, the pokemon who won the fight should upgrade                level_up(current_pokemon)            return flag        elif command == 'attack':            can_attack = current_pokemon.current_mp >= current_pokemon.min_consume_mp()            if not can_attack:                print("This pokemon doesn't have enough MP to use any skill! Please change pokemon or run away!")            else:                flag = attack(player, enemy)                return flag        else:            print("Input Error!")def fight_enemy(player, enemy):    global current_pokemon    player_round = True    continuing = True    while continuing:        if player_round:            if current_pokemon.current_hp == 0:                print(f"{current_pokemon.name} has run out of HP!")                current_pokemon = choose_pokemon(player)            else:                continuing = player_turn(player, enemy)            player_round = False        else:            index = random.randint(0, len(enemy.skills) - 1)            enemy.skills[index].activate(enemy, current_pokemon)            if not player.can_fight():                print("All of your pokemons can't fight!")                continuing = False            player_round = Truedef interact(player, enemy):    global current_pokemon    if not player.can_fight():        print("All of your pokemons can't fight!")        print("You ran away!")    else:        current_pokemon = choose_pokemon(player)        while True:            command = input("What do you want to do now <check enemy|check pokemon|fight|run>: ").lower()            if command == 'run':                print("You run away")                break            elif command == 'check enemy':                print(enemy)            elif command == 'check pokemon':                print(current_pokemon)            elif command == 'fight':                print(f"You walk to {enemy.name} and fight!")                fight_enemy(player, enemy)                break            else:                print("Input Error!")def hang_out(day_num, player):    if player.reduce_energy(1):        print(">>> Hanging out ...")        time.sleep(1)        print("You encountered a Pokemon! Now is time to fight!")        enemy = spawn_pokemon(day_num)        interact(player, enemy)        print(">>> Returning ...")        # possibly encounter second wild pokemon according to day_num        rand = random.randint(1, 6)        if rand <= day_num:            print("Oh, you encounter another pokemon on your way home!")            time.sleep(0.5)            enemy = spawn_pokemon(day_num)            interact(player, enemy)            print(">>> Returning ...")def treat(player, index):    pokemon = player.pokemons[index]    if pokemon.current_hp == pokemon.max_hp and pokemon.current_mp == pokemon.max_mp:        return False    else:        pokemon.current_hp = pokemon.max_hp        pokemon.current_mp = pokemon.max_mp        return Truedef treat_pokemons(player):    """    treat pokemons consuming 200 gold each    :param player:    """    if player.reduce_energy(1):        print(f"You have {player.money} gold")        print(">>> Going to pokemon centre to threat your pokemon ...")        time.sleep(1)        while True:            for i in range(len(player.pokemons)):                print(f"{i + 1}: {player.pokemons[i].name}  level: {player.pokemons[i].level}  HP: {player.pokemons[i].current_hp}  MP: {player.pokemons[i].current_mp}")            command = input("Which one you want to threat? <{index}|all|cancel>").lower()            if command == 'cancel':                break            elif command.isdecimal() and 0 < int(command) < len(player.pokemons) + 1:                if player.money >= 200:                    result = treat(player, int(command) - 1)                    if result:                        player.money -= 200                        print("Successfully recovered")                    else:                        print("This pokemon don't need recovery")                else:                    print("Treat one pokemon need 200 gold, you don't have enough money!")                    break            elif command == 'all':                count = 0                for i in player.pokemons:                    if i.current_hp != i.max_hp or i.current_mp != i.max_mp:                        count += 1                total_money = count * 200                if count == 0:                    print("None of your pokemons need treatment!")                    break                if player.money <= total_money:                    print("Treat all of your hurt pokemons will need {total_money} gold, you don't have enough gold!")                else:                    player.money -= total_money                    for i in range(len(player.pokemons)):                        treat(player, i)                    print("All of your hurt pokemons have been recovered!")                    break        print(">>> Returning ...")def show_commands():    for i in constant_data.command_dict:        print(f"{i}: {constant_data.command_dict[i]}")        time.sleep(0.3)def day_loop(day_num, player, boss):    print(f"Today is day {day_num}!")    show_commands()    continuing = True    while continuing:        command = input("what do you want to do now: ").lower()        if command not in constant_data.command_dict:            print("Input Error!")        else:            if command == 'exit game':                print("GAME OVER")                return False            elif command == 'check player':                print(player)            elif command == 'check pokemons':                player.check_pokemons()            elif command == 'check boss':                print(boss)            elif command == 'hang out':                hang_out(day_num, player)            elif command == 'work':                if player.reduce_energy(1):                    print("You work to earn 1000 gold!")                    player.money += 1000                    print(f"Now you have {player.money} gold")            elif command == 'treat pokemons':                treat_pokemons(player)            elif command == 'sleep':                print("You slept until the next day...")                player.energy = 5                return True            elif command == 'show commands':                show_commands()            elif command == 'challenge boss':                if player.reduce_energy(2):                    interact(player, boss)                    if boss.current_hp == 0:                        print("Congratulations! The Boss has been defeated and you win the game!")                        return Falsedef main():    if menu_command():        print('>>> Initializing player...')        name = input("what is your name: ")        player = game_class.Player(name)        print(f'Hi, {player.name}! Welcome to pokemon World!')        time.sleep(0.75)        print(f'You have initial money: {player.money}!')        time.sleep(0.75)        print("Now it's time for you to choose your first pokemon!")        time.sleep(0.75)        choose_initial_pokemon(player)        time.sleep(1)        boss = random.randint(0, 1)  # randomly initialize Boss        if boss == 1:            boss = constant_data.mewtwo        else:            boss = constant_data.onix        print(">>> BREAKING NEWS!!!")        print("Our village is in trouble!!!")        time.sleep(0.75)        print(f"{boss.name} will attack us after 5 days!!!")        time.sleep(0.75)        print(f"{player.name}, please help us and defeat {boss.name}.")        print('\n')        # go through five days        for i in range(1, 6):            continuing = day_loop(i, player, boss)            if not continuing:                return        # five days later        print("Five days has passed!")        print(f"Here comes {boss.name}!")        interact(player, boss)        if boss.current_hp == 0:            print("Congratulations! The Boss has been defeated and you win the game!")        else:            print("You lost, game is over!")if __name__ == '__main__':    main()